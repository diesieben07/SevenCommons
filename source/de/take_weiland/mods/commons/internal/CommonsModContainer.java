package de.take_weiland.mods.commons.internal;

import java.io.File;
import java.util.Arrays;

import net.minecraftforge.common.Configuration;

import com.google.common.base.Throwables;
import com.google.common.eventbus.EventBus;
import com.google.common.eventbus.Subscribe;

import cpw.mods.fml.common.DummyModContainer;
import cpw.mods.fml.common.LoadController;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.event.FMLConstructionEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.event.FMLServerStartingEvent;
import de.take_weiland.mods.commons.internal.updater.CommandUpdates;
import de.take_weiland.mods.commons.internal.updater.UpdateController;
import de.take_weiland.mods.commons.internal.updater.UpdateControllerLocal;
import de.take_weiland.mods.commons.internal_t.network.CommonsPackets;
import de.take_weiland.mods.commons.network.ModPacketHandler;

public class CommonsModContainer extends DummyModContainer {

	public static SevenCommonsProxy proxy;
	public static CommonsModContainer instance;
	public static Configuration config;
	public static boolean updaterEnabled;
	public static UpdateController updateController;
	public static String updateCommand;
	
	public CommonsModContainer() {
		super(new ModMetadata());
		ModMetadata meta = getMetadata();
		meta.name = "SevenCommons";
		meta.modId = "sevencommons";
		meta.authorList = Arrays.asList("diesieben07");
		meta.version = "1.0";
		
		meta.description = "Provides various Utilities for other mods.";
		
		meta.autogenerated = false;
		
		instance = this;
	}

	@Override
	public boolean registerBus(EventBus bus, LoadController controller) {
		bus.register(this);
		
		return true;
	}
	
	@Subscribe
	public void constructing(FMLConstructionEvent event) {
		try { // my version of @SidedProxy
			if (event.getSide().isServer()) {
				proxy = (SevenCommonsProxy) Class.forName("de.take_weiland.mods.commons.internal.ServerProxy").newInstance();
			} else {
				proxy = (SevenCommonsProxy) Class.forName("de.take_weiland.mods.commons.internal.client.ClientProxy").newInstance();
			}
		} catch (Throwable t) {
			// nope
			Throwables.propagate(t);
		}
	}
	
	@Subscribe
	public void preInit(FMLPreInitializationEvent event) {
		config = new Configuration(event.getSuggestedConfigurationFile());
		
		updaterEnabled = config.get(Configuration.CATEGORY_GENERAL, "enableUpdater", true).getBoolean(true);
		
		ModPacketHandler.setupNetworking(this, CommonsPackets.values());
		proxy.preInit(event);
	}
	
	@Subscribe
	public void postInit(FMLPostInitializationEvent event) {
		if (updaterEnabled) {
			updateController = new UpdateControllerLocal();
			updateController.searchForUpdates();
		}
	}
	
	@Subscribe
	public void serverStarting(FMLServerStartingEvent event) {
		if (event.getSide().isServer()) {
			updateCommand = config.get(Configuration.CATEGORY_GENERAL, "updatesCommand", "modUpdates").getString();
			event.registerServerCommand(new CommandUpdates(updateCommand));
		}
	}

	private static File source;
	
	static {
		try {
			source = new File(CommonsModContainer.class.getProtectionDomain().getCodeSource().getLocation().toURI());
		} catch (Throwable t) {
			// Ummm ?
			Throwables.propagate(t);
		}
	}
	
	@Override
	public File getSource() {
		return source;
	}

	@Override
	public Class<?> getCustomResourcePackClass() {
		if (source == null) {
			return null;
		}
		try {
			return source.isDirectory() ? Class.forName("de.take_weiland.mods.commons.internal.CommonsFolderResourcePack") : Class.forName("de.take_weiland.mods.commons.internal.CommonsFileResourcePack");
		} catch (ClassNotFoundException e) {
			return null;
		} 
	}
}
