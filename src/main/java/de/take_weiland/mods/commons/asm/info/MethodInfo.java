package de.take_weiland.mods.commons.asm.info;

import static org.objectweb.asm.Opcodes.*;

/**
 * <p>Some information about a method.</p>
 *
 * @author diesieben07
 */
public abstract class MethodInfo extends MemberInfo {

	private final ClassInfo clazz;

	MethodInfo(ClassInfo clazz) {
		this.clazz = clazz;
	}

	/**
	 * <p>Get the method descriptor of the method represented by this MethodInfo.</p>
	 *
	 * @return the method descriptor
	 */
	public abstract String desc();

	/**
	 * <p>Get a ClassInfo representing the class containing this method.</p>
	 *
	 * @return the containing class
	 */
	@Override
	public ClassInfo containingClass() {
		return clazz;
	}

	/**
	 * <p>Determine if this method is a constructor.</p>
	 *
	 * @return true if this method is a constructor
	 */
	public boolean isConstructor() {
		return name().equals("<init>");
	}

	/**
	 * <p>Determine if this method is {@code synchronized}.</p>
	 *
	 * @return true if this method is {@code synchronized}
	 */
	public boolean isSynchronized() {
		return hasModifier(ACC_SYNCHRONIZED);
	}

	/**
	 * <p>Determine if this method is a {@code native}.</p>
	 *
	 * @return true if this method is {@code native}
	 */
	public boolean isNative() {
		return hasModifier(ACC_NATIVE);
	}

	/**
	 * <p>Determine if this method is abstract.</p>
	 *
	 * @return true if this method is abstract
	 */
	public boolean isAbstract() {
		return hasModifier(ACC_ABSTRACT);
	}

	/**
	 * <p>Determine if this method is a bridge method generated by the compiler.</p>
	 *
	 * @return true if this is a bridge method
	 */
	public boolean isBridge() {
		return hasModifier(ACC_BRIDGE);
	}

	/**
	 * <p>Determine if this method uses varargs.</p>
	 *
	 * @return true if this method uses varargs
	 */
	public boolean hasVarargs() {
		return hasModifier(ACC_VARARGS);
	}

	/**
	 * <p>Determine if the {@code strictfp} modifier is set on this method.</p>
	 *
	 * @return true if the {@code strictfp} modifier is set on this method
	 */
	public boolean usesStrictFP() {
		return hasModifier(ACC_STRICT);
	}

}
