package de.take_weiland.mods.commons.internal.exclude;

import com.google.common.base.Throwables;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.eventbus.EventBus;
import com.google.common.eventbus.Subscribe;
import cpw.mods.fml.client.FMLFileResourcePack;
import cpw.mods.fml.client.FMLFolderResourcePack;
import cpw.mods.fml.common.DummyModContainer;
import cpw.mods.fml.common.LoadController;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.event.FMLInterModComms;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.event.FMLServerStartingEvent;
import cpw.mods.fml.common.registry.GameRegistry;
import de.take_weiland.mods.commons.config.ConfigInjector;
import de.take_weiland.mods.commons.config.GetProperty;
import de.take_weiland.mods.commons.internal.SCEventHandler;
import de.take_weiland.mods.commons.internal.SCPackets;
import de.take_weiland.mods.commons.internal.SevenCommons;
import de.take_weiland.mods.commons.internal.SevenCommonsProxy;
import de.take_weiland.mods.commons.internal.updater.CommandUpdates;
import de.take_weiland.mods.commons.internal.updater.UpdateControllerLocal;
import de.take_weiland.mods.commons.net.Network;
import de.take_weiland.mods.commons.net.PacketFactory;
import de.take_weiland.mods.commons.util.JavaUtils;
import net.minecraftforge.common.Configuration;
import net.minecraftforge.common.MinecraftForge;

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;

public final class SCModContainer extends DummyModContainer {

	private static final URL UPDATE_URL;
	public static long clientMainThreadID;

	static {
		try {
			UPDATE_URL = new URL("http://www.take-weiland.de/sevencommons.json");
		} catch (MalformedURLException e) {
			throw Throwables.propagate(e);
		}
	}

	public static SevenCommonsProxy proxy;
	public static SCModContainer instance;
	public static UpdateControllerLocal updateController;
    public static PacketFactory<SCPackets> packets;
	
	@GetProperty(comment = "Set to false to disable the auto-updating feature of SevenCommons")
	public static boolean updaterEnabled = true;
	
	@GetProperty(comment = "The name of the command used to access the update feature on a server")
	public static String updateCommand = "modupdates";

	@GetProperty(comment = "How often to check for updates for mods in minutes. Set to 0 to disable this feature (default)")
	public static int updaterRecheckDelay = 0;

	public SCModContainer() {
		super(new ModMetadata());
		ModMetadata meta = getMetadata();
		meta.name = "SevenCommons";
		meta.modId = "sevencommons";
		meta.authorList = ImmutableList.of("diesieben07");
		meta.version = SevenCommons.VERSION;
		
		meta.description = "Provides various Utilities for other mods.";
		
		meta.autogenerated = false;
		
		instance = this;
	}

	@Override
	public boolean registerBus(EventBus bus, LoadController controller) {
		bus.register(this);
		return true;
	}
	
	@Subscribe
	public void preInit(FMLPreInitializationEvent event) {
		if (event.getSide().isClient()) {
			clientMainThreadID = Thread.currentThread().getId();
		}

		try { // my version of @SidedProxy
			if (event.getSide().isServer()) {
				proxy = Class.forName("de.take_weiland.mods.commons.internal.ServerProxy").asSubclass(SevenCommonsProxy.class).newInstance();
			} else {
				proxy = Class.forName("de.take_weiland.mods.commons.internal.client.ClientProxy").asSubclass(SevenCommonsProxy.class).newInstance();
			}
		} catch (Throwable t) {
			// if this fails, we can't do anything but crash
			throw JavaUtils.throwUnchecked(t);
		}
		
		Configuration config = new Configuration(event.getSuggestedConfigurationFile());
		ConfigInjector.inject(config, getClass());

		packets = Network.simplePacketHandler("SevenCommons", SCPackets.class);

		proxy.preInit(event);

		SCEventHandler eh = new SCEventHandler();
		MinecraftForge.EVENT_BUS.register(eh);
		GameRegistry.registerPlayerTracker(eh);
	}

	@Subscribe
	public void processIMCs(FMLInterModComms.IMCEvent event) {
		updaterEnabled = false;
		if (updaterEnabled) {
			ImmutableMap.Builder<String, URL> urls = ImmutableMap.builder();
			urls.put(getModId(), UPDATE_URL);

			for (FMLInterModComms.IMCMessage msg : event.getMessages()) {
				if (msg.isStringMessage() && msg.key.equalsIgnoreCase("setUpdateURL")) {
					try {
						urls.put(msg.getSender(), new URL(msg.getStringValue()));
					} catch (MalformedURLException e) {
						SevenCommons.LOGGER.warning(String.format("Invalid updateURL \"%s\" from %s", msg.getStringValue(), msg.getSender()));
					}
				}
			}
			updateController = new UpdateControllerLocal(urls.build(), updaterRecheckDelay);
		}
	}

	@Subscribe
	public void serverStarting(FMLServerStartingEvent event) {
		if (event.getSide().isServer()) {
			event.registerServerCommand(new CommandUpdates(updateCommand));
		}
	}
	
	@Override
	public File getSource() {
		return SevenCommons.source;
	}

	@Override
	public Class<?> getCustomResourcePackClass() {
		return getSource().isDirectory() ? FMLFolderResourcePack.class : FMLFileResourcePack.class;
	}

}
