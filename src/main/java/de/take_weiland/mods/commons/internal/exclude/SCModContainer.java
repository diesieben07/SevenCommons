package de.take_weiland.mods.commons.internal.exclude;

import com.google.common.collect.ImmutableList;
import com.google.common.eventbus.EventBus;
import com.google.common.eventbus.Subscribe;
import cpw.mods.fml.client.FMLFileResourcePack;
import cpw.mods.fml.client.FMLFolderResourcePack;
import cpw.mods.fml.common.DummyModContainer;
import cpw.mods.fml.common.LoadController;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import de.take_weiland.mods.commons.config.ConfigInjector;
import de.take_weiland.mods.commons.config.GetProperty;
import de.take_weiland.mods.commons.internal.SCPackets;
import de.take_weiland.mods.commons.internal.SevenCommons;
import de.take_weiland.mods.commons.internal.SevenCommonsProxy;
import de.take_weiland.mods.commons.net.Network;
import de.take_weiland.mods.commons.net.PacketFactory;
import de.take_weiland.mods.commons.util.JavaUtils;
import net.minecraftforge.common.Configuration;

import java.io.File;

public final class SCModContainer extends DummyModContainer {

	public static long clientMainThreadID;

	public static SevenCommonsProxy proxy;
	public static SCModContainer instance;
    public static PacketFactory<SCPackets> packets;
	
	@GetProperty(comment = "Set to false to disable the auto-updating feature of SevenCommons")
	public static boolean updaterEnabled = true;

	public SCModContainer() {
		super(new ModMetadata());
		ModMetadata meta = getMetadata();
		meta.name = "SevenCommons";
		meta.modId = "sevencommons";
		meta.authorList = ImmutableList.of("diesieben07");
		meta.version = SevenCommons.VERSION;
		
		meta.description = "Provides various Utilities for other mods.";
		
		meta.autogenerated = false;
		
		instance = this;
	}

	@Override
	public boolean registerBus(EventBus bus, LoadController controller) {
		bus.register(this);
		return true;
	}
	
	@Subscribe
	public void preInit(FMLPreInitializationEvent event) {
		if (event.getSide().isClient()) {
			clientMainThreadID = Thread.currentThread().getId();
		}

		try { // my version of @SidedProxy
			if (event.getSide().isServer()) {
				proxy = Class.forName("de.take_weiland.mods.commons.internal.ServerProxy").asSubclass(SevenCommonsProxy.class).newInstance();
			} else {
				proxy = Class.forName("de.take_weiland.mods.commons.internal.client.ClientProxy").asSubclass(SevenCommonsProxy.class).newInstance();
			}
		} catch (Throwable t) {
			// if this fails, we can't do anything but crash
			throw JavaUtils.throwUnchecked(t);
		}
		
		Configuration config = new Configuration(event.getSuggestedConfigurationFile());
		ConfigInjector.inject(config, getClass());

		packets = Network.simplePacketHandler("SevenCommons", SCPackets.class);

		proxy.preInit(event);
	}

	@Override
	public File getSource() {
		return SevenCommons.source;
	}

	@Override
	public Class<?> getCustomResourcePackClass() {
		return getSource().isDirectory() ? FMLFolderResourcePack.class : FMLFileResourcePack.class;
	}

}
